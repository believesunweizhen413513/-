

1、混合开发：在前端页面嵌入后端代码，实现功能(调取数据库数据渲染到页面)；

缺点：
    - 前后端代码混在一起，不方便后期维护和升级
    - 需要全栈：25k-30k
    - 前任离职了，后面的人接收工作比较复杂，如果可以，建议老板重构。

2、前后端分离开发模式：

前端：做页面(写静态html、css、js)，获取接口数据，1、渲染到页面；2、表单验证；(非空、正则、正确性验证)；3、业务逻辑处理（详情页：加入购物车的时候传id给后端；购物车：更改数量、删除功能都是修改数据库的数据）；

桥梁：ajax(沟通前后端)

后端：处理业务逻辑，数据的增删改查；(做接口给前端)


业务逻辑：功能
- 商家买了vip：5000 影币
- 地心历险记：200 影币
- 看一部电影就要消耗一定的影币，这里的减法，这个逻辑，可以是前端做，也可以是后端做
    - 前端：前端做业务功能
        * 和后端获取到现在还有多少影币：5000
        * 获取当前观看影片的影币：200
        * 剩余：5000-200=4800
        * 把4800传给后端，后端把数据更新到数据库里面
    - 后端：后端主导
        * 把当前观看影片的影币：200 获取到，发给后端
        * 查询现有的剩余影币5000，减去200.剩余的4800，更新数据库

        